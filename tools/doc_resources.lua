#!/usr/bin/env lua
local pretty = require "pl.pretty"
local utils = require "pl.utils"
local file = require "pl.file"
package.path = "../src/?.lua;" .. package.path
local resources = require "luatwit.resources"

-- read source code
local res_lines = assert(utils.readlines "../src/luatwit/resources.lua")

-- red doc strings generated by 'parse_twitter_docs.lua'
local desc_tbl = assert(pretty.read(assert(file.read "api_desc")))

local decl_lines, doc_delta = {}, {}

-- find existing doc positions and insert empty lines if needed
local i, n = 1, #res_lines
while i <= n do
    local method, url = res_lines[i]:match '^_M%.[%w_]+%s*=%s*(%u+)%s"([%w_/]+)"'
    if method then
        decl_lines[i] = { method, url }
        local doc_start
        for j = i-1, 1, -1 do
            if res_lines[j]:find("^%-%-%- ") then
                doc_start = j
                break
            elseif not res_lines[j]:find("^%-%-") then
                break
            end
        end
        local key = method .. " " .. url
        if not doc_start then
            table.insert(res_lines, i, "")
            doc_delta[key] = 1
            i = i + 1
            n = n + 1
        else
            doc_delta[key] = i - doc_start
        end
    end
    i = i + 1
end

local function shorten_desc(desc)
    local line = desc:match "^[^\n]+"
    if line:find "DEPRECATED" then
        line = desc:match "^[^\n]+\n([^\n]+)"
    end
    local s = line:find "%.%s+"
    if s then
        line = line:sub(1, s)
    end
    return line
end

-- fill in documentation
for i, decl in pairs(decl_lines) do
    local method, url = unpack(decl)
    local key = method .. " " .. url
    local desc = desc_tbl[key]
    if desc then
        res_lines[i - doc_delta[key]] = "--- " .. shorten_desc(desc)
    end
end

-- save the result
assert(file.write("out.lua", table.concat(res_lines, "\n") .. "\n"))
